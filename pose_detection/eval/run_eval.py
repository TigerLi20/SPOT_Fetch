import os
import subprocess
import argparse
import sys


# Step 0: Video Processing
def process_videos(video_path, csv_output_path):
    print(f"Processing video: {video_path}")
    command = [
        "python", "pose_detection/gesture_detection.py",
        "--mode", "video",
        "--video_path", video_path,
        "--csv_path", csv_output_path,
        '--calibration_path', '/Users/ivy/Desktop/spot_gesture_eval/calib.mp4'
    ]
    subprocess.run(command)
    print(f"Video processing completed. Output CSV: {csv_output_path}")


# Step 1: Data Cleanup (Calling the data cleanup script)
def clean_data(input_csv, output_csv, threshold):
    print(f"Cleaning data from: {input_csv}")
    command = [
        "python", "pose_detection/eval/data_cleanup.py",
        "--input", input_csv,
        "--output", output_csv,
        "--threshold", str(threshold)
        
    ]
    subprocess.run(command)
# Step 2: Evaluation using cleaned data (Running pointing_eval.py)
def evaluate_cleaned_data(video_path, cleaned_csv_path, target_locations):
    print(f"Evaluating cleaned data with video: {video_path}")
    # command = [
    #     "python", "pose_detection/eval/pointing_eval.py",
    #     "--video_path", video_path,
    #     "--csv_path", cleaned_csv_path,
    #     "--target_locations", target_locations
    # ]
    
    # subprocess.run(command)
    import pointing_eval
    target_locations_list = [target_locations[i:i+3] for i in range(0, len(target_locations), 3)]
    # output_directory = os.path.dirname(args.csv_path) 
    output_directory = video_path[0:-4]+'/'
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
    # Evaluate pointing gestures with multiple targets
    pointing_eval.evaluate_pointing_gestures(cleaned_csv_path, video_path, target_locations_list, output_directory)
    
    print(f"Data cleanup completed. Cleaned CSV: {output_directory}")


    print(f"Evaluation completed using cleaned data from: {cleaned_csv_path}")

# Step 3: Visualization (Calling the visualization function in video_output.py)
def visualize_results(img_dir, video_path):
    print(f"Visualizing results for video: {video_path}")
    # Assuming visualization logic is in video_output.py
    import video_output
    output_path = video_path
    video_output.merge_images_to_video(img_dir, output_path)
    print(f"Visualization completed.")

# Main function to orchestrate the evaluation process
def main(video_path, original_csv_path, threshold, target_locations):
    img_dir = video_path[0:-4]
    # Step 1: Process videos
    process_videos(video_path, original_csv_path)
    
    # Step 2: Data Cleanup
    cleaned_csv_path = original_csv_path[:-4] + '_cleanup.csv'
    clean_data(original_csv_path, cleaned_csv_path, threshold)

    # Step 3: Evaluation
    evaluate_cleaned_data(video_path, cleaned_csv_path, target_locations)
    # evaluate_cleaned_data(video_path, original_csv_path, target_locations)
    # Step 4: Visualization
    # output_path = os.path.join(os.path.dirname(video_path), new_filename) 
    output_directory = video_path[0:-4]+'_processed.mp4'
    print(output_directory)
    visualize_results(img_dir, output_directory)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Evaluation process for gesture detection.")
    parser.add_argument("--video_path", type=str, help="Path to the video file.")
    parser.add_argument("--csv_path", type=str, help="Path to the original CSV file generated by gesture_detection.")
    
    # parser.add_argument("--cleaned_csv_path", type=str, required=True, help="Path to the cleaned CSV output file.")
    # parser.add_argument("--img_dir",type=str, required = True, help = 'image directory for all of the')
    parser.add_argument("--threshold", type=float, default=0.4, help="Threshold for data cleanup.")
    parser.add_argument('--target_locations', type=float, nargs='+', help="List of target locations in the format x1 y1 z1 x2 y2 z2 ...")
    args = parser.parse_args()
    
    # Run the main process
    if args.video_path:
        main(args.video_path, args.csv_path, args.threshold, args.target_locations)
    # else:
    #     csv_path = "/Users/ivy/Desktop/spot_gesture_eval/3m_video_updated_cleanup.csv"
    #     video_path = "/Users/ivy/Desktop/spot_gesture_eval/videos/3m_video.mp4"
    #     target_locations = [-1, .46, 3,1, .74, 3]
    #     output_directory = "/Users/ivy/Desktop/spot_gesture_eval/videos/3m_video/"
    #     main(video_path, csv_path, 0.4, target_locations)